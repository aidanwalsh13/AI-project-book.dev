import os
from dotenv import load_dotenv # environnment variables from .env file
from google import genai

load_dotenv()
api_key = os.getenv("GEMINI_API_KEY") # API variable from .env file. the key is generated by google gemini, allowing coder to access ai program

if not api_key:
	raise ValueError("GEMINI_API_KEY not found in environment variables.")

client = genai.Client(api_key=api_key) # client instance handles API key internally
# client acts as a messenger, taking requests to the AI and returning the responses
# client parameter = local variable (api_key=api_key)

def main():
	print("Hello from ai-project!")
	try:
		response = client.models.generate_content(model="gemini-2.0-flash-001", contents="Why is Boot.dev such a great place to learn backend development? Use one paragraph maximum.")
		print("\nAPI Response:")
		print("-------------")
		print(response.text)
		print("\nToken Usage:")
		print(f"Prompt tokens: {response.usage_metadata.prompt_token_count}")
		print(f"Response tokens: {response.usage_metadata.candidates_token_count}")
		print("\nAPI call successful! ðŸŽ‰")
	except Exception as e:
		print(f"An error occurred: {e}")

if __name__ == "__main__":
    main()
